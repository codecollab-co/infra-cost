{"version":3,"sources":["../src/index.ts","../package.json","../src/account.ts","../src/logger.ts","../src/config.ts","../src/cost.ts","../src/printers/fancy.ts","../src/printers/json.ts","../src/printers/slack.ts","../src/printers/text.ts"],"sourcesContent":["import { Command } from 'commander';\nimport packageJson from '../package.json' assert { type: 'json' };\nimport { getAccountAlias } from './account';\nimport { getAwsConfigFromOptionsOrFile } from './config';\nimport { getTotalCosts } from './cost';\nimport { printFancy } from './printers/fancy';\nimport { printJson } from './printers/json';\nimport { notifySlack } from './printers/slack';\nimport { printPlainText } from './printers/text';\n\n// Suppress the maintenance mode message from the AWS SDK\n// FIXME: Upgrade to aws-sdk v3 adn remove this\nprocess.env.AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE = '1';\n\nconst program = new Command();\n\nprogram\n  .version(packageJson.version)\n  .name('aws-cost')\n  .description(packageJson.description)\n  .option('-p, --profile [profile]', 'AWS profile to use', 'default')\n  // AWS credentials to override reading from the config files\n  .option('-k, --access-key [key]', 'AWS access key')\n  .option('-s, --secret-key [key]', 'AWS secret key')\n  .option('-T, --session-token [key]', 'AWS session Token')\n  .option('-r, --region [region]', 'AWS region', 'us-east-1')\n  // Output variants\n  .option('-j, --json', 'Get the output as JSON')\n  .option('-u, --summary', 'Get only the summary without service breakdown')\n  .option('-t, --text', 'Get the output as plain text (no colors / tables)')\n  // Slack integration\n  .option('-S, --slack-token [token]', 'Token for the slack integration')\n  .option('-C, --slack-channel [channel]', 'Channel to which the slack integration should post')\n  // Other options\n  .option('-h, --help', 'Get the help of the CLI')\n  .parse(process.argv);\n\ntype OptionsType = {\n  // AWS credentials to override reading from the config files\n  accessKey: string;\n  secretKey: string;\n  sessionToken: string;\n  region: string;\n  // AWS profile to use\n  profile: string;\n  // Output variants\n  text: boolean;\n  json: boolean;\n  summary: boolean;\n  // Slack token\n  slackToken: string;\n  slackChannel: string;\n  // Other options\n  help: boolean;\n};\n\nconst options = program.opts<OptionsType>();\n\nif (options.help) {\n  program.help();\n  process.exit(0);\n}\n\nconst awsConfig = await getAwsConfigFromOptionsOrFile({\n  profile: options.profile,\n  accessKey: options.accessKey,\n  secretKey: options.secretKey,\n  sessionToken: options.sessionToken,\n  region: options.region,\n});\n\nconst alias = await getAccountAlias(awsConfig);\n\nconst costs = await getTotalCosts(awsConfig);\n\nif (options.json) {\n  printJson(alias, costs, options.summary);\n} else if (options.text) {\n  printPlainText(alias, costs, options.summary);\n} else {\n  printFancy(alias, costs, options.summary);\n}\n\n// Send a notification to slack if the token and channel are provided\nif (options.slackToken && options.slackChannel) {\n  await notifySlack(alias, costs, options.summary, options.slackToken, options.slackChannel);\n}\n","{\n  \"name\": \"aws-cost-cli\",\n  \"version\": \"0.2.7\",\n  \"description\": \"A CLI tool to perform cost analysis on your AWS account\",\n  \"type\": \"module\",\n  \"author\": {\n    \"name\": \"Code Collab\",\n    \"email\": \"codecollab.co@gmail.com\",\n    \"url\": \"https://github.com/codecollab-co\"\n  },\n  \"files\": [\n    \"!tests/**/*\",\n    \"dist/**/*\",\n    \"!dist/**/*.js.map\",\n    \"bin/**/*\"\n  ],\n  \"bin\": {\n    \"aws-cost\": \"./bin/index.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"dev\": \"tsup --watch\",\n    \"prebuild\": \"run-s clean\",\n    \"predev\": \"run-s clean\",\n    \"clean\": \"rm -rf dist\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"aws\",\n    \"cost\",\n    \"cli\",\n    \"aws-cost\",\n    \"aws-cost-cli\",\n    \"aws-costs\",\n    \"typescript\",\n    \"aws cli\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/codecollab-co/infra-cost.git\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/codecollab-co/infra-cost/issues\"\n  },\n  \"homepage\": \"https://github.com/codecollab-co/infra-cost#readme\",\n  \"dependencies\": {\n    \"@aws-sdk/shared-ini-file-loader\": \"^3.254.0\",\n    \"aws-sdk\": \"^2.1299.0\",\n    \"chalk\": \"^5.2.0\",\n    \"commander\": \"^10.0.0\",\n    \"dayjs\": \"^1.11.7\",\n    \"dotenv\": \"^16.0.3\",\n    \"node-fetch\": \"^3.3.0\",\n    \"ora\": \"^6.1.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.11.18\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsup\": \"^6.5.0\",\n    \"typescript\": \"^4.9.4\"\n  }\n}\n","import AWS from 'aws-sdk';\nimport { AWSConfig } from './config';\nimport { showSpinner } from './logger';\n\nexport async function getAccountAlias(awsConfig: AWSConfig): Promise<string> {\n  showSpinner('Getting account alias');\n\n  const iam = new AWS.IAM(awsConfig);\n\n  const accountAliases = await iam.listAccountAliases().promise();\n  const foundAlias = accountAliases?.['AccountAliases']?.[0];\n\n  if (foundAlias) {\n    return foundAlias;\n  }\n\n  const sts = new AWS.STS(awsConfig);\n\n  const accountInfo = await sts.getCallerIdentity().promise();\n\n  return accountInfo?.Account || '';\n}\n","import chalk from 'chalk';\nimport ora, { Ora } from 'ora';\n\nexport function printFatalError(error: string) {\n  console.error(`  \n    ${chalk.bold.redBright.underline(`Error:`)}\n    ${chalk.redBright(`${error}`)}\n  `);\n  process.exit(1);\n}\n\nlet spinner: Ora | undefined;\n\n/**\n * Shows the spinner with the given text\n * @param text Text to show in the spinner\n */\nexport function showSpinner(text: string) {\n  if (!spinner) {\n    spinner = ora({ text: '' }).start();\n  }\n\n  spinner.text = text;\n}\n\n/**\n * Hides the spinner and removes the loading text\n * @returns undefined\n */\nexport function hideSpinner() {\n  if (!spinner) {\n    return;\n  }\n\n  spinner.stop();\n}\n","import fs from 'node:fs';\nimport { loadSharedConfigFiles } from '@aws-sdk/shared-ini-file-loader';\nimport chalk from 'chalk';\nimport { printFatalError } from './logger';\n\nexport type EnvConfig = {\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsRegion: string;\n};\n\nexport type AWSConfig = {\n  credentials: {\n    accessKeyId: string;\n    secretAccessKey: string;\n    sessionToken: string;\n  };\n  region: string;\n};\n\nexport async function getAwsConfigFromOptionsOrFile(options: {\n  profile: string;\n  accessKey: string;\n  secretKey;\n  sessionToken;\n  region: string;\n}): Promise<AWSConfig> {\n  const { profile, accessKey, secretKey, sessionToken, region } = options;\n\n  if (accessKey || secretKey) {\n    if (!accessKey || !secretKey) {\n      printFatalError(`\n      You need to provide both of the following options: \n        ${chalk.bold('--access-key')}\n        ${chalk.bold('--secret-key')}\n      `);\n    }\n\n    return {\n      credentials: {\n        accessKeyId: accessKey,\n        secretAccessKey: secretKey,\n        sessionToken: sessionToken\n      },\n      region: region,\n    };\n  }\n\n  return {\n    credentials: await loadAwsCredentials(profile),\n    region: region,\n  };\n}\n\n/**\n * Loads the environment variables from the .env file\n * @param path Path to the .env file\n */\nasync function loadAwsCredentials(profile: string = 'default'): Promise<AWSConfig['credentials'] | undefined> {\n  const configFiles = await loadSharedConfigFiles();\n\n  const credentialsFile = configFiles.credentialsFile;\n\n  const accessKey: string = credentialsFile?.[profile]?.aws_access_key_id;\n  const secretKey: string = credentialsFile?.[profile]?.aws_secret_access_key;\n  const sessionToken: string = credentialsFile?.[profile]?.aws_session_token;\n\n  // Fixing the region to us-east-1 since Cost Explorer only supports this region\n  // https://docs.aws.amazon.com/general/latest/gr/billing.html#billing-cur\n  // https://github.com/codecollab-co/infra-cost/issues/1\n  // const configFile = configFiles.configFile;\n  // const region: string = configFile?.[profile]?.region;\n\n  if (!accessKey || !secretKey) {\n    const sharedCredentialsFile = process.env.AWS_SHARED_CREDENTIALS_FILE || '~/.aws/credentials';\n    const sharedConfigFile = process.env.AWS_CONFIG_FILE || '~/.aws/config';\n\n    printFatalError(`\n    Could not find the AWS credentials in the following files for the profile \"${profile}\":\n      ${chalk.bold(sharedCredentialsFile)}\n      ${chalk.bold(sharedConfigFile)}\n\n    If the config files exist at different locations, set the following environment variables:\n      ${chalk.bold(`AWS_SHARED_CREDENTIALS_FILE`)}\n      ${chalk.bold(`AWS_CONFIG_FILE`)}\n\n    You can also configure the credentials via the following command:\n      ${chalk.bold(`aws configure --profile ${profile}`)}\n\n    You can also provide the credentials via the following options:\n      ${chalk.bold(`--access-key`)}\n      ${chalk.bold(`--secret-key`)}\n      ${chalk.bold(`--region`)}\n    `);\n  }\n\n  return {\n    accessKeyId: accessKey,\n    secretAccessKey: secretKey,\n    sessionToken: sessionToken,\n  };\n}\n","import AWS from 'aws-sdk';\nimport dayjs from 'dayjs';\nimport { AWSConfig } from './config';\nimport { showSpinner } from './logger';\n\nexport type RawCostByService = {\n  [key: string]: {\n    [date: string]: number;\n  };\n};\n\nexport async function getRawCostByService(awsConfig: AWSConfig): Promise<RawCostByService> {\n  showSpinner('Getting pricing data');\n\n  const costExplorer = new AWS.CostExplorer(awsConfig);\n  const endDate = dayjs().subtract(1, 'day');\n  const startDate = endDate.subtract(65, 'day');\n\n  // Get the cost and usage data for the specified account\n  const pricingData = await costExplorer\n    .getCostAndUsage({\n      TimePeriod: {\n        Start: startDate.format('YYYY-MM-DD'),\n        End: endDate.format('YYYY-MM-DD'),\n      },\n      Granularity: 'DAILY',\n      Filter: {\n        Not: {\n          Dimensions: {\n            Key: 'RECORD_TYPE',\n            Values: ['Credit', 'Refund', 'Upfront', 'Support'],\n          },\n        },\n      },\n      Metrics: ['UnblendedCost'],\n      GroupBy: [\n        {\n          Type: 'DIMENSION',\n          Key: 'SERVICE',\n        },\n      ],\n    })\n    .promise();\n\n  const costByService = {};\n\n  for (const day of pricingData.ResultsByTime) {\n    for (const group of day.Groups) {\n      const serviceName = group.Keys[0];\n      const cost = group.Metrics.UnblendedCost.Amount;\n      const costDate = day.TimePeriod.End;\n\n      costByService[serviceName] = costByService[serviceName] || {};\n      costByService[serviceName][costDate] = parseFloat(cost);\n    }\n  }\n\n  return costByService;\n}\n\nexport type TotalCosts = {\n  totals: {\n    lastMonth: number;\n    thisMonth: number;\n    last7Days: number;\n    yesterday: number;\n  };\n  totalsByService: {\n    lastMonth: { [key: string]: number };\n    thisMonth: { [key: string]: number };\n    last7Days: { [key: string]: number };\n    yesterday: { [key: string]: number };\n  };\n};\n\nfunction calculateServiceTotals(rawCostByService: RawCostByService): TotalCosts {\n  const totals = {\n    lastMonth: 0,\n    thisMonth: 0,\n    last7Days: 0,\n    yesterday: 0,\n  };\n\n  const totalsByService = {\n    lastMonth: {},\n    thisMonth: {},\n    last7Days: {},\n    yesterday: {},\n  };\n\n  const startOfLastMonth = dayjs().subtract(1, 'month').startOf('month');\n  const startOfThisMonth = dayjs().startOf('month');\n  const startOfLast7Days = dayjs().subtract(7, 'day');\n  const startOfYesterday = dayjs().subtract(1, 'day');\n\n  for (const service of Object.keys(rawCostByService)) {\n    const servicePrices = rawCostByService[service];\n\n    let lastMonthServiceTotal = 0;\n    let thisMonthServiceTotal = 0;\n    let last7DaysServiceTotal = 0;\n    let yesterdayServiceTotal = 0;\n\n    for (const date of Object.keys(servicePrices)) {\n      const price = servicePrices[date];\n      const dateObj = dayjs(date);\n\n      if (dateObj.isSame(startOfLastMonth, 'month')) {\n        lastMonthServiceTotal += price;\n      }\n\n      if (dateObj.isSame(startOfThisMonth, 'month')) {\n        thisMonthServiceTotal += price;\n      }\n\n      if (dateObj.isSame(startOfLast7Days, 'week') && !dateObj.isSame(startOfYesterday, 'day')) {\n        last7DaysServiceTotal += price;\n      }\n\n      if (dateObj.isSame(startOfYesterday, 'day')) {\n        yesterdayServiceTotal += price;\n      }\n    }\n\n    totalsByService.lastMonth[service] = lastMonthServiceTotal;\n    totalsByService.thisMonth[service] = thisMonthServiceTotal;\n    totalsByService.last7Days[service] = last7DaysServiceTotal;\n    totalsByService.yesterday[service] = yesterdayServiceTotal;\n\n    totals.lastMonth += lastMonthServiceTotal;\n    totals.thisMonth += thisMonthServiceTotal;\n    totals.last7Days += last7DaysServiceTotal;\n    totals.yesterday += yesterdayServiceTotal;\n  }\n\n  return {\n    totals,\n    totalsByService,\n  };\n}\n\nexport async function getTotalCosts(awsConfig: AWSConfig): Promise<TotalCosts> {\n  const rawCosts = await getRawCostByService(awsConfig);\n  const totals = calculateServiceTotals(rawCosts);\n\n  return totals;\n}\n","import chalk from 'chalk';\nimport { TotalCosts } from '../cost';\nimport { hideSpinner } from '../logger';\n\nexport function printFancy(accountAlias: string, totals: TotalCosts, isSummary: boolean = false) {\n  hideSpinner();\n  console.clear();\n\n  const totalCosts = totals.totals;\n  const serviceCosts = totals.totalsByService;\n\n  const allServices = Object.keys(serviceCosts.yesterday);\n  const sortedServiceNames = allServices.sort((a, b) => b.length - a.length);\n\n  const maxServiceLength =\n    sortedServiceNames.reduce((max, service) => {\n      return Math.max(max, service.length);\n    }, 0) + 1;\n\n  const totalLastMonth = chalk.green(`$${totalCosts.lastMonth.toFixed(2)}`);\n  const totalThisMonth = chalk.green(`$${totalCosts.thisMonth.toFixed(2)}`);\n  const totalLast7Days = chalk.green(`$${totalCosts.last7Days.toFixed(2)}`);\n  const totalYesterday = chalk.bold.yellowBright(`$${totalCosts.yesterday.toFixed(2)}`);\n\n  console.log('');\n  console.log(`${'AWS Cost Report:'.padStart(maxServiceLength + 1)} ${chalk.bold.yellow(accountAlias)}`);\n  console.log('');\n  console.log(`${'Last Month'.padStart(maxServiceLength)}: ${totalLastMonth}`);\n  console.log(`${'This Month'.padStart(maxServiceLength)}: ${totalThisMonth}`);\n  console.log(`${'Last 7 days'.padStart(maxServiceLength)}: ${totalLast7Days}`);\n  console.log(`${chalk.bold('Yesterday'.padStart(maxServiceLength))}: ${totalYesterday}`);\n  console.log('');\n\n  if (isSummary) {\n    return;\n  }\n\n  const headerPadLength = 11;\n\n  const serviceHeader = chalk.white('Service'.padStart(maxServiceLength));\n  const lastMonthHeader = chalk.white(`Last Month`.padEnd(headerPadLength));\n  const thisMonthHeader = chalk.white(`This Month`.padEnd(headerPadLength));\n  const last7DaysHeader = chalk.white(`Last 7 Days`.padEnd(headerPadLength));\n  const yesterdayHeader = chalk.bold.white('Yesterday'.padEnd(headerPadLength));\n\n  console.log(`${serviceHeader} ${lastMonthHeader} ${thisMonthHeader} ${last7DaysHeader} ${yesterdayHeader}`);\n\n  for (let service of sortedServiceNames) {\n    const serviceLabel = chalk.cyan(service.padStart(maxServiceLength));\n    const lastMonthTotal = chalk.green(`$${serviceCosts.lastMonth[service].toFixed(2)}`.padEnd(headerPadLength));\n    const thisMonthTotal = chalk.green(`$${serviceCosts.thisMonth[service].toFixed(2)}`.padEnd(headerPadLength));\n    const last7DaysTotal = chalk.green(`$${serviceCosts.last7Days[service].toFixed(2)}`.padEnd(headerPadLength));\n    const yesterdayTotal = chalk.bold.yellowBright(\n      `$${serviceCosts.yesterday[service].toFixed(2)}`.padEnd(headerPadLength)\n    );\n\n    console.log(`${serviceLabel} ${lastMonthTotal} ${thisMonthTotal} ${last7DaysTotal} ${yesterdayTotal}`);\n  }\n}\n","import { TotalCosts } from '../cost';\nimport { hideSpinner } from '../logger';\n\nexport function printJson(\n  accountAlias: string,\n  totalCosts: TotalCosts,\n  isSummary = false\n) {\n  hideSpinner();\n\n  if (isSummary) {\n    console.log(\n      JSON.stringify(\n        {\n          account: accountAlias,\n          totals: totalCosts.totals,\n        },\n        null,\n        2\n      )\n    );\n\n    return;\n  }\n\n  console.log(\n    JSON.stringify(\n      {\n        account: accountAlias,\n        ...totalCosts,\n      },\n      null,\n      2\n    )\n  );\n}\n","import fetch from 'node-fetch';\nimport { TotalCosts } from '../cost';\n\n/**\n * Formats the costs by service into a string\n *\n * @param costs Cost breakdown for account\n * @returns formatted message\n */\nfunction formatServiceBreakdown(costs: TotalCosts): string {\n  const serviceCosts = costs.totalsByService;\n\n  const sortedServices = Object.keys(serviceCosts.yesterday)\n    .filter((service) => serviceCosts.yesterday[service] > 0)\n    .sort((a, b) => serviceCosts.yesterday[b] - serviceCosts.yesterday[a]);\n\n  const serviceCostsYesterday = sortedServices.map((service) => {\n    return `> ${service}: \\`$${serviceCosts.yesterday[service].toFixed(2)}\\``;\n  });\n\n  return serviceCostsYesterday.join('\\n');\n}\n\nexport async function notifySlack(\n  accountAlias: string,\n  costs: TotalCosts,\n  isSummary: boolean,\n  slackToken: string,\n  slackChannel: string\n) {\n  const channel = slackChannel;\n\n  const totals = costs.totals;\n  const serviceCosts = costs.totalsByService;\n\n  let serviceCostsYesterday = [];\n  Object.keys(serviceCosts.yesterday).forEach((service) => {\n    serviceCosts.yesterday[service].toFixed(2);\n    serviceCostsYesterday.push(`${service}: $${serviceCosts.yesterday[service].toFixed(2)}`);\n  });\n\n  const summary = `> *Account: ${accountAlias}*\n\n> *Summary *\n> Total Yesterday: \\`$${totals.yesterday.toFixed(2)}\\`\n> Total This Month: \\`$${totals.thisMonth.toFixed(2)}\\`\n> Total Last Month: \\`$${totals.lastMonth.toFixed(2)}\\`\n`;\n\n  const breakdown = `\n> *Breakdown by Service:*\n${formatServiceBreakdown(costs)}\n`;\n\n  let message = `${summary}`;\n  if (!isSummary) {\n    message += `${breakdown}`;\n  }\n\n  const response = await fetch('https://slack.com/api/chat.postMessage', {\n    method: 'post',\n    body: JSON.stringify({\n      channel,\n      blocks: [\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: message,\n          },\n        },\n      ],\n    }),\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: `Bearer ${slackToken}`,\n    },\n  });\n\n  const data = (await response.json()) as { ok: boolean; error?: string };\n  if (!data.ok) {\n    const message = data.error || 'Unknown error';\n    console.error(`\\nFailed to send message to Slack: ${message}`);\n    process.exit(1);\n  }\n\n  console.log('\\nSuccessfully sent message to Slack');\n}\n","import { TotalCosts } from '../cost';\nimport { hideSpinner } from '../logger';\n\nfunction printPlainSummary(accountAlias: string, costs: TotalCosts) {\n  hideSpinner();\n  console.clear();\n  console.log('');\n  console.log(`Account: ${accountAlias}`);\n  console.log('');\n  console.log('Totals:');\n  console.log(`  Last Month: $${costs.totals.lastMonth.toFixed(2)}`);\n  console.log(`  This Month: $${costs.totals.thisMonth.toFixed(2)}`);\n  console.log(`  Last 7 Days: $${costs.totals.last7Days.toFixed(2)}`);\n  console.log(`  Yesterday: $${costs.totals.yesterday.toFixed(2)}`);\n}\n\nexport function printPlainText(accountAlias: string, totals: TotalCosts, isSummary: boolean = false) {\n  printPlainSummary(accountAlias, totals);\n  if (isSummary) {\n    return;\n  }\n\n  const serviceTotals = totals.totalsByService;\n\n  const allServices = Object.keys(serviceTotals.yesterday).sort((a, b) => b.length - a.length);\n\n  console.log('');\n  console.log('Totals by Service:');\n\n  console.log('  Last Month:');\n  allServices.forEach((service) => {\n    console.log(`    ${service}: $${serviceTotals.lastMonth[service].toFixed(2)}`);\n  });\n\n  console.log('');\n  console.log('  This Month:');\n  allServices.forEach((service) => {\n    console.log(`    ${service}: $${serviceTotals.thisMonth[service].toFixed(2)}`);\n  });\n\n  console.log('');\n  console.log('  Last 7 Days:');\n  allServices.forEach((service) => {\n    console.log(`    ${service}: $${serviceTotals.last7Days[service].toFixed(2)}`);\n  });\n\n  console.log('');\n  console.log('  Yesterday:');\n  allServices.forEach((service) => {\n    console.log(`    ${service}: $${serviceTotals.yesterday[service].toFixed(2)}`);\n  });\n}\n"],"mappings":"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","names":["awsConfig","chalk","options","chalk","AWS","awsConfig","AWS","chalk","chalk","costs","message","costs"]}
